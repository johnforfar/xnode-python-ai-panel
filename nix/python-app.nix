{
  # Inputs expected based on the example structure
  python3Packages,
  python3,
  pkgs, # Still needed for lib.getExe
  lib,
}:
python3Packages.buildPythonApplication {
  pname = "xnode-python-ai-panel-backend"; # Keep your project name
  version = "1.0";

  src = ../python-app; # Source directory remains the same

  format = "other"; # We create the executable script manually

  # Keep propagatedBuildInputs minimal, matching the example's approach
  propagatedBuildInputs = with python3.pkgs; [
    setuptools
  ];

  # Aligning buildPhase with the example structure
  buildPhase =
    let
      # Get python executable path using lib.getExe as in the example
      python = lib.getExe pkgs.python3;
    in
    ''
            runHook preBuild # Standard practice

            # Create necessary directories in $out (only $out/bin needed)
            mkdir -p $out/bin

            # Copy the 'src' directory from ../python-app into $out/bin/
            echo "Copying source directory $src/src to $out/bin/"
            cp -r $src/src $out/bin/
            echo "Contents of $out/bin after copy:"
            ls -l $out/bin

            # Create the executable script using cat heredoc, aligned with example structure
            echo "Creating executable script: $out/bin/xnode-python-ai-panel-backend"
            cat > $out/bin/xnode-python-ai-panel-backend << EOF
      #!/bin/sh
      # Wrapper script generated by nix/python-app.nix (aligned with example)

      echo "--- Backend Wrapper Script Starting ---"

      # Setup venv and install dependencies (as in example, but with YOUR deps)
      echo "Creating venv..."
      ${python} -m venv venv || { echo "Failed to create venv"; exit 1; }
      echo "Activating venv..."
      source venv/bin/activate || { echo "Failed to activate venv"; exit 1; }

      # --- Install YOUR required dependencies here ---
      echo "Installing dependencies: aiohttp aiohttp-cors..."
      pip install --no-cache-dir aiohttp aiohttp-cors || { echo "pip install failed"; exit 1; }

      # Set PORT environment variable
      export PORT=\${"PORT:-8000"}
      echo "PORT set to: \$PORT"

      echo "Executing Python backend: python app.py"
      # Use the python from the venv now
      python app.py # Execute app.py relative to the CWD
      EXIT_CODE=\$?
      echo "--- Backend Python script exited with code: \$EXIT_CODE ---"
      exit \$EXIT_CODE
      EOF

            # Make the script executable
            chmod +x $out/bin/xnode-python-ai-panel-backend
            echo "Wrapper script created and made executable."

            runHook postBuild # Standard practice
    '';

  # No installPhase needed if buildPhase creates everything in $out

  meta = {
    description = "Python backend for AI Panel Discussion";
    mainProgram = "xnode-python-ai-panel-backend";
  };
}
